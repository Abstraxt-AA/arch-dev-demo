version: '3.8'

x-common-variables: &common-variables
  MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-example}
  KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092

services:
  # Message Broker
  kafka-broker:
    image: apache/kafka:latest
    container_name: kafka-broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,LOCALHOST://:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,LOCALHOST://localhost:9094
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1
    ports:
      - "9094:9094"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      kafka-broker:
        condition: service_healthy
    ports:
      - "9080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker:9092

  # Database
  database:
    image: mysql:8.0
    container_name: database
    environment:
      <<: *common-variables
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d:ro
      - ./config-db:/etc/mysql/conf.d:ro
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "3080:8080"
    depends_on:
      database:
        condition: service_healthy

  # Cache
  cache:
    image: redis:alpine
    container_name: cache
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Observability
  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:latest
    container_name: openobserve
    ports:
      - "5080:5080"
    environment:
      ZO_ROOT_USER_EMAIL: ${ZO_ROOT_USER_EMAIL:-root@example.com}
      ZO_ROOT_USER_PASSWORD: ${ZO_ROOT_USER_PASSWORD:-example}

  # Change Data Capture
  product-status-cdc:
    image: zendesk/maxwell:latest
    container_name: product-status-cdc
    restart: always
    depends_on:
      database:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    command: >
      bin/maxwell 
      --user=root 
      --password=${MYSQL_ROOT_PASSWORD:-example} 
      --host=database 
      --schema_database=maxwell-product-status 
      --client_id=34001 
      --replica_server_id=34001 
      --filter='exclude: *.*, include:catalog.product' 
      --producer=kafka 
      --kafka_topic=product_status 
      --kafka.bootstrap.servers=kafka-broker:9092

  stock-cdc:
    image: zendesk/maxwell:latest
    container_name: stock-cdc
    restart: always
    depends_on:
      database:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    command: >
      bin/maxwell 
      --user=root 
      --password=${MYSQL_ROOT_PASSWORD:-example} 
      --host=database 
      --schema_database=maxwell-stock 
      --client_id=34002 
      --replica_server_id=34002 
      --filter='exclude: *.*, include:stock.ticker' 
      --producer=kafka 
      --kafka_topic=stock 
      --kafka.bootstrap.servers=kafka-broker:9092

  # Microservices
  catalog-ms:
    build:
      context: ./catalog
      dockerfile: Dockerfile
    image: ahmedyehia.demo/catalog-ms:latest
    container_name: catalog-ms
    ports:
      - "8081:8080"
    depends_on:
      database:
        condition: service_healthy
    environment:
      <<: *common-variables
      SPRING_PROFILES_ACTIVE: docker

  stock-ms:
    build:
      context: ./stock
      dockerfile: Dockerfile
    image: ahmedyehia.demo/stock-ms:latest
    container_name: stock-ms
    ports:
      - "8082:8080"
    depends_on:
      database:
        condition: service_healthy
    environment:
      <<: *common-variables
      SPRING_PROFILES_ACTIVE: docker

  checkout-ms:
    build:
      context: ./checkout
      dockerfile: Dockerfile
    image: ahmedyehia.demo/checkout-ms:latest
    container_name: checkout-ms
    ports:
      - "8083:8080"
    depends_on:
      cache:
        condition: service_healthy
    environment:
      <<: *common-variables
      SPRING_PROFILES_ACTIVE: docker

volumes:
  mysql_data:
  redis_data:
